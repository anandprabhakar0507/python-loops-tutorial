


.. raw:: html

   <h1 align="center">

LOOPS IN PYTHON

.. raw:: html

   </h1>

Table of Contents
-----------------

.. raw:: html

   <div class="alert alert-block alert-info" style="margin-top: 20px">

.. raw:: html

   <li>

For Loops

.. raw:: html

   </p>

.. raw:: html

   </li>

.. raw:: html

   <li>

While Loops

.. raw:: html

   </p>

.. raw:: html

   </li>

.. raw:: html

   <p>

.. raw:: html

   </p>

Estimated Time Needed: 15 min

.. raw:: html

   </div>

.. raw:: html

   <hr>

.. raw:: html

   <center>

.. raw:: html

   <h2>

For Loops

.. raw:: html

   </h2>

.. raw:: html

   </center>

Sometimes, you might want to repeat a given operation many times.
Repeated executions like this are performed by **loops**. We will look
at two types of loops, **for** loops and **while** loops.

Before we discuss loops lets discuss the **range** object. It is helpful
to think of the range object as an ordered list. For now, let's look at
the simplest case. If we would like to generate a sequence that contains
three elements ordered from 0 to 2 we simply use the following command:

.. code:: python

    range(3)

.. raw:: html

   <h4 align="center">

:Example of range function.

.. raw:: html

   </h4>

The ``for`` loop
~~~~~~~~~~~~~~~~

| The **for** loop enables you to execute a code block multiple times.
  For example, you would use this if you would like to print out every
  element in a list.
| Let's try to use a **for** loop to print all the years presented in
  the list **dates**:

This can be done as follows:

.. code:: python

    dates = [1982,1980,1973]
    N=len(dates)
    
    for i in range(N):
         
        print(dates[i])     

The code in the indent is executed **N** times, each time the value of
**i** is increased by 1 for every execution. The statement executed is
to\*\* print\*\* out the value in the list at index **i** as shown here:

.. raw:: html

   <h4 align="center">

Example of printing out the elements of a list.

.. raw:: html

   </h4>

In this example we can print out a sequence of numbers from 0 to 7:

.. code:: python

    for i in range(0,8):
        print(i)

Write a for loop the prints out all the element between -5 and 5 using the range function.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="q2" class="collapse">

::

    for i in range(-5,6):
        print(i)

.. raw:: html

   </div>

In Python we can directly access the elements in the list as follows:

.. code:: python

    for year in dates:  
        print(year)  
     

For each iteration, the value of the variable **years** behaves like the
value of **dates[i]** in the first example:

.. raw:: html

   <h4 align="center">

Example of a for loop

.. raw:: html

   </h4>

Print the elements of the following list:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Genres=[ 'rock', 'R&B', 'Soundtrack' 'R&B', 'soul', 'pop']** Make sure
you follow Python conventions.


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="q3" class="collapse">

::

    Genres=[ 'rock', 'R&B', 'Soundtrack' 'R&B', 'soul', 'pop']

    for Genre in Genres:
        print(Genre)

.. raw:: html

   </div>

We can change the elements in a list:

.. code:: python

    squares=['red','yellow','green','purple','blue ']
    
    for i in range(0,5):
        print("Before square ",i, 'is',  squares[i])
        
        squares[i]='wight'
        
        print("After square ",i, 'is',  squares[i])
        
        
        

Write a for loop that prints out the following list: squares=['red','yellow','green','purple','blue ']:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="q3" class="collapse">

::

    squares=['red','yellow','green','purple','blue ']
    for square in squares:
        print(square)

.. raw:: html

   </div>

We can access the index and the elements of a list as follows:

.. code:: python

    squares=['red','yellow','green','purple','blue ']
    
    for i,square in enumerate(squares):
        print(i,square)
        

.. raw:: html

   <center>

.. raw:: html

   <h2>

While Loops

.. raw:: html

   </h2>

.. raw:: html

   </center>

As you can see, the **for** loop is used for a controlled flow of
repetition. However, what if we don't know when we want to stop the
loop? What if we want to keep executing a code block until a certain
condition is met? The **while** loop exists as a tool for repeated
execution based on a condition. The code block will keep being executed
until the given logical condition returns a **False** boolean value.

Let’s say we would like to iterate through list **dates** and stop at
the year 1973, then print out the number of iterations. This can be done
with the following block of code:

.. code:: python

    dates = [1982,1980,1973,2000]
    
    i=0;
    year=0
    while(year!=1973):
        year=dates[i]
        i=i+1
        print(year)
        
        
    print("it took ", i ,"repetitions to get out of loop")

A while loop iterates merely until the condition in the argument is not
met, as shown in the following figure :

.. raw:: html

   <h4 align="center">

An Example of indices as negative numbers

.. raw:: html

   </h4>

Write a while loop to display the values of the Rating of an album playlist stored in the list “PlayListRatings”. If the score is less than 6, exit the loop. The list “PlayListRatings” is given by: PlayListRatings = [10,9.5,10, 8,7.5, 5,10, 10]:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    PlayListRatings = [10,9.5,10,8,7.5,5,10,10]

.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="q8" class="collapse">

::

    PlayListRatings = [10,9.5,10, 8,7.5, 5,10, 10]

    i = 0;
    Rating = PlayListRatings[i]
    while(Rating >= 6):
        print(Rating)
        i = i + 1
        Rating = PlayListRatings[i]
        

.. raw:: html

   </div>

.. raw:: html

   <hr>

Write a while loop to copy the strings 'orange' of the list 'squares' to the list 'new\_squares'. Stop and exit the loop if the value on the list is not 'orange':
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    squares=['orange','orange','purple','blue ','orange']
    new_squares=[];


.. raw:: html

   <div align="right">

Click here for the solution

.. raw:: html

   </div>

.. raw:: html

   <div id="q9" class="collapse">

::

    squares=['orange','orange','purple','blue ','orange']
    new_squares=[];

    i=0
    while(squares[i]=='orange'):
        
        new_squares.append(squares[i])
        i=i+1

.. raw:: html

   </div>



About the Authors:
==================

`Joseph
Santarcangelo <https://www.linkedin.com/in/joseph-s-50398b136/>`__ has a
PhD in Electrical Engineering, his research focused on using machine
learning, signal processing, and computer vision to determine how videos
impact human cognition. Joseph has been working for IBM since he
completed his PhD.

Copyright © 2017 `cognitiveclass.ai <https:cognitiveclass.ai>`__. This
notebook and its source code are released under the terms of the `MIT
License <cognitiveclass.ai>`__.
